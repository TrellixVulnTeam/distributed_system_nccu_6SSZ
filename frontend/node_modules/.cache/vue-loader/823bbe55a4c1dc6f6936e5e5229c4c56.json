{"remainingRequest":"C:\\Users\\Graham\\Desktop\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Graham\\Desktop\\frontend\\src\\views\\teacher\\QuestionAnswers.vue?vue&type=style&index=0&id=24279990&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\Graham\\Desktop\\frontend\\src\\views\\teacher\\QuestionAnswers.vue","mtime":1620097894000},{"path":"C:\\Users\\Graham\\Desktop\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1621157949320},{"path":"C:\\Users\\Graham\\Desktop\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1621157949579},{"path":"C:\\Users\\Graham\\Desktop\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1621157949545},{"path":"C:\\Users\\Graham\\Desktop\\frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1621157957964},{"path":"C:\\Users\\Graham\\Desktop\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621157932554},{"path":"C:\\Users\\Graham\\Desktop\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1621157949579}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYm9yZGVyLWxlZnQgew0KICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2VmZWZlZjsNCn0NCg=="},{"version":3,"sources":["QuestionAnswers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA","file":"QuestionAnswers.vue","sourceRoot":"src/views/teacher","sourcesContent":["<template>\r\n    <back-card\r\n        class=\"mt-16 mx-auto\"\r\n        action-text=\"返回答題狀況\"\r\n        @button-click=\"goTo('/teacher/unit-overview')\"\r\n    >\r\n        <div class=\"pa-14\">\r\n            <unit-title :title=\"title\" :unit=\"unit\"></unit-title>\r\n            <div>\r\n                <score-histogram :data=\"overallChartData\"></score-histogram>\r\n            </div>\r\n            <div>\r\n                <h3 class=\"headline font-weight-medium mb-7\">各題狀況</h3>\r\n                <question-row\r\n                    v-for=\"(question, index) in questions\"\r\n                    :readonly=\"true\"\r\n                    :key=\"`question-${index}`\"\r\n                    :question=\"question.question\"\r\n                    :options=\"question.options\"\r\n                    :answer=\"question.answer\"\r\n                >\r\n                    <div class=\"mt-n10\">\r\n                        <score-bar-chart\r\n                            class=\"px-10\"\r\n                            :dataset=\"questionChartDatas[index]\"\r\n                        ></score-bar-chart>\r\n                    </div>\r\n                </question-row>\r\n            </div>\r\n        </div>\r\n    </back-card>\r\n</template>\r\n\r\n<script>\r\nimport BackCard from '@/components/common/BackCard';\r\nimport UnitTitle from '@/components/common/UnitTitle';\r\nimport ScoreHistogram from '@/components/chart/ScoreHistogram';\r\nimport ScoreBarChart from '@/components/chart/ScoreBarChart';\r\nimport QuestionRow from '@/components/common/QuestionRow';\r\nimport { apiExecutor } from '@/api';\r\n\r\n// import {\r\n//     mockQuestionResults,\r\n//     mockStudentScores,\r\n// } from '../../dummies/summaryData';\r\n\r\nexport default {\r\n    name: 'QuestionAnswers',\r\n    components: {\r\n        BackCard,\r\n        UnitTitle,\r\n        ScoreHistogram,\r\n        ScoreBarChart,\r\n        QuestionRow,\r\n    },\r\n    data() {\r\n        return {\r\n            title: '',\r\n            unitId: 0,\r\n            overallChartData: {\r\n                columns: ['name', 'score'],\r\n                rows: [],\r\n            },\r\n            questionChartDatas: [],\r\n            questions: [],\r\n        };\r\n    },\r\n    computed: {\r\n        unit() {\r\n            return `Unit ${this.unitId}`;\r\n        },\r\n    },\r\n    methods: {\r\n        goTo(path) {\r\n            this.$router.push({ path });\r\n        },\r\n        resetQuestion(question) {\r\n            const options = [\r\n                `A ${question.option_a}`,\r\n                `B ${question.option_b}`,\r\n                `C ${question.option_c}`,\r\n                `D ${question.option_d}`,\r\n            ];\r\n            const countAnswers = this.countAnswers(question);\r\n            return {\r\n                question: question.question,\r\n                answer: question.answer,\r\n                countAnswers,\r\n                options,\r\n            };\r\n        },\r\n        countAnswers(question) {\r\n            const answerCount = {\r\n                A: { count: 0, students: [] },\r\n                B: { count: 0, students: [] },\r\n                C: { count: 0, students: [] },\r\n                D: { count: 0, students: [] },\r\n            };\r\n            question.studentAnswers.forEach((studentAnswer) => {\r\n                const option = studentAnswer.studentOption;\r\n                answerCount[option].count += 1;\r\n                answerCount[option].students.push(studentAnswer.name);\r\n            });\r\n            return answerCount;\r\n        },\r\n        formatQuestions(questions) {\r\n            return questions.map((question) => {\r\n                return this.resetQuestion(question);\r\n            });\r\n        },\r\n        getQuestionRows(questions) {\r\n            return questions.map((question) => {\r\n                const A = question.countAnswers['A'];\r\n                const B = question.countAnswers['B'];\r\n                const C = question.countAnswers['C'];\r\n                const D = question.countAnswers['D'];\r\n                return {\r\n                    columns: ['option', 'count', 'students'],\r\n                    rows: [\r\n                        {\r\n                            option: 'D',\r\n                            count: D.count,\r\n                            students: D.students.join('、'),\r\n                        },\r\n                        {\r\n                            option: 'C',\r\n                            count: C.count,\r\n                            students: C.students.join('、'),\r\n                        },\r\n                        {\r\n                            option: 'B',\r\n                            count: B.count,\r\n                            students: B.students.join('、'),\r\n                        },\r\n                        {\r\n                            option: 'A',\r\n                            count: A.count,\r\n                            students: A.students.join('、'),\r\n                        },\r\n                    ],\r\n                };\r\n            });\r\n        },\r\n    },\r\n    async mounted() {\r\n        this.unitId = this.$route.params.id;\r\n\r\n        const resultRes = await apiExecutor.getQuestionResults(this.unitId);\r\n        const studentRes = await apiExecutor.getAllStudentScores(this.unitId);\r\n\r\n        this.questions = this.formatQuestions(resultRes.questions);\r\n\r\n        this.questionChartDatas = this.getQuestionRows(this.questions);\r\n        this.overallChartData = {\r\n            ...this.overallChartData,\r\n            rows: studentRes,\r\n        };\r\n        this.title = resultRes.unitTitle;\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.border-left {\r\n    border-left: 1px solid #efefef;\r\n}\r\n</style>\r\n"]}]}